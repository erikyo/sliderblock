(()=>{"use strict";var e,t={456:()=>{const e=window.wp.blocks,t=window.wp.hooks,n="start";class i{constructor(e,t){this.config=t,this.totalSlides=e,this.isTransitioning=!1,s(this,e,t)}next(e=1){if(this.isTransitioning||this.isStatic)return;const{stateIndex:t}=this;let n=0,i=t;for(let t=0;t<e;t++){const e=this.states[i];n+=e.next.moveSlides,i=e.next.stateIndex}return i!==t?(this.stateIndex=i,[t,n]):void 0}prev(e=1){if(this.isTransitioning||this.isStatic)return;const{stateIndex:t}=this;let n=0,i=t;for(let t=0;t<e;t++){const e=this.states[i];n+=e.prev.moveSlides,i=e.prev.stateIndex}return i!==t?(this.stateIndex=i,[t,n]):void 0}}function s(e,t,n){e.stateIndex=0,function(e){const{slidesToScroll:t,slidesToShow:n}=e.config,{totalSlides:i,config:s}=e;if(i<n&&(s.slidesToShow=i),!(i<=n)&&(t>n&&(s.slidesToScroll=n),i<t+n)){const e=i-n;s.slidesToScroll=e}}(e),e.isStatic=t<=n.slidesToShow,e.states=function(e){const{totalSlides:t}=e,{loop:n}=e.config,i=function(e){const{slidesToShow:t,slidesToScroll:n,loop:i}=e.config,{isStatic:s,totalSlides:o}=e,r=[],a=o-1;for(let e=0;e<o;e+=n){const n=e+t-1;if(n>a){if(!i){const e=a-t+1,n=r.length-1;(0===r.length||r.length>0&&r[n][0]!==e)&&r.push([e,a]);break}{const t=n-o;r.push([e,t])}}else r.push([e,n]);if(s)break}return r}(e),s=[],o=i.length-1;for(let e=0;e<i.length;e++){let r,a;n?(r=e===o?0:e+1,a=0===e?o:e-1):(r=e===o?o:e+1,a=0===e?0:e-1);const l=i[e][0],c=i[r][0],d=i[a][0];let u=c-l;c<l&&(u+=t);let p=l-d;d>l&&(p+=t),s.push({page:i[e],next:{stateIndex:r,moveSlides:u},prev:{stateIndex:a,moveSlides:p}})}return s}(e)}function o(e){if(e.onSlideCbs){const t=e.states[e.stateIndex],[n,i]=t.page;e.onSlideCbs.forEach((t=>t(e.stateIndex,n,i)))}}function r(e){e.offset=-1*e.states[e.stateIndex].page[0],a(e),o(e)}function a(e){const{track:t,offset:n,dragged:i}=e;t.style.transform=0===n?`translate3d(${i}px,0px,0px)`:`translate3d(  calc( ${i}px + ${n} * (var(--slide-width) + ${e.config.slideGap})),0px,0px)`}function l(e){e.track.style.transitionDuration=`${e.config.transitionDuration}ms`}function c(e){e.track.style.transitionDuration="0ms"}const d=()=>"ontouchstart"in window;function u(e){const t=this,n=t.slider;n.isTransitioning||(n.dragged=0,t.isScrolled=!1,t.startMouseClientX="touches"in e?e.touches[0].clientX:e.clientX,"touches"in e||(e.target||t).setPointerCapture(e.pointerId),c(n),h(t,"addEventListener"))}function p(e){const t=this,n="touches"in e?e.touches[0].clientX:e.clientX,i=t.slider.dragged=n-t.startMouseClientX,s=Math.abs(i);s>5&&(t.slider.isDragging=!0),s>15&&e.preventDefault(),t.slider.dragged=i,a(t.slider),!t.isScrolled&&t.slider.config.loop&&i>10&&(t.isScrolled=!0,t.slider.prev())}function f(){const e=this,t=e.slider.dragged;e.slider.isDragging=!1,h(e,"removeEventListener"),e.slider.dragged=0,a(e.slider),l(e.slider),e.isScrolled||(t<-10?e.slider.next():t>10&&e.slider.prev())}const g=e=>e.preventDefault();function h(e,t){e[t]("contextmenu",f),d()?(e[t]("touchend",f),e[t]("touchmove",p)):(e[t]("pointerup",f),e[t]("pointermove",p))}const v={slideGap:"20px",slidesToScroll:1,slidesToShow:1,loop:!0,enableAutoplay:!1,stopAutoplayOnInteraction:!0,autoplayInterval:3e3,autoplayDirection:"to left",enablePagination:!0,transitionDuration:300,transitionTimingFunction:"ease",draggable:!0};function m(e){const t={...v};for(const n in e)if(window.matchMedia(n).matches){const i=e[n];for(const e in i)t[e]=i[e]}return t}function b(){const e=this.index,t=this.slider,n=t.stateIndex,i=t.config.loop,s=Math.abs(e-n),o=t.states.length-s,r=s>t.states.length/2&&i;e>n?r?t.prev(o):t.next(s):r?t.next(o):t.prev(s)}function w(e,t=e.config.transitionDuration){e.isTransitioning=!0,setTimeout((()=>{e.isTransitioning=!1}),t)}class y extends i{constructor(e,t){const n=e.querySelector(".blaze-track"),i=n.children,s=t?m(t):{...v};super(i.length,s),this.config=s,this.el=e,this.track=n,this.slides=i,this.offset=0,this.dragged=0,this.isDragging=!1,this.el.blazeSlider=this,this.passedConfig=t;const o=this;n.slider=o,x(s,o);let r=!1,a=0;window.addEventListener("resize",(()=>{if(0===a)return void(a=window.innerWidth);const e=window.innerWidth;a!==e&&(a=e,r||(r=!0,setTimeout((()=>{o.refresh(),r=!1}),200)))}))}next(e){if(this.isTransitioning)return;const t=super.next(e);if(!t)return;const[n,i]=t;S(this,n),w(this),function(e,t){const n=requestAnimationFrame;e.config.loop?(e.offset=-1*t,a(e),setTimeout((()=>{!function(e,t){for(let n=0;n<t;n++)e.track.append(e.slides[0])}(e,t),c(e),e.offset=0,a(e),n((()=>{n((()=>{l(e),o(e)}))}))}),e.config.transitionDuration)):r(e)}(this,i)}prev(e){if(this.isTransitioning)return;const t=super.prev(e);if(!t)return;const[n,i]=t;S(this,n),w(this),function(e,t){const n=requestAnimationFrame;if(e.config.loop){c(e),e.offset=-1*t,a(e),function(e,t){const n=e.slides.length;for(let i=0;i<t;i++){const t=e.slides[n-1];e.track.prepend(t)}}(e,t);const i=()=>{n((()=>{l(e),n((()=>{e.offset=0,a(e),o(e)}))}))};e.isDragging?d()?e.track.addEventListener("touchend",i,{once:!0}):e.track.addEventListener("pointerup",i,{once:!0}):n(i)}else r(e)}(this,i)}stopAutoplay(){clearInterval(this.autoplayTimer)}destroy(){this.track.removeEventListener(d()?"touchstart":"pointerdown",u),this.stopAutoplay(),this.paginationButtons?.forEach((e=>e.remove())),this.el.classList.remove("static"),this.el.classList.remove(n)}refresh(){const e=this.passedConfig?m(this.passedConfig):{...v};this.destroy(),x(e,this)}onSlide(e){return this.onSlideCbs||(this.onSlideCbs=new Set),this.onSlideCbs.add(e),()=>this.onSlideCbs.delete(e)}}function S(e,t){const i=e.el.classList,s=e.stateIndex,o=e.paginationButtons;e.config.loop||(0===s?i.add(n):i.remove(n),s===e.states.length-1?i.add("end"):i.remove("end")),o&&e.config.enablePagination&&(o[t].classList.remove("active"),o[s].classList.add("active"))}function x(e,t){const i=t.track;t.slides=i.children,t.offset=0,t.config=e,s(t,t.totalSlides,e),e.loop||t.el.classList.add(n),e.enableAutoplay&&!e.loop&&(e.enableAutoplay=!1),i.style.transitionProperty="transform",i.style.transitionTimingFunction=t.config.transitionTimingFunction,i.style.transitionDuration=`${t.config.transitionDuration}ms`;const{slidesToShow:o,slideGap:r}=t.config;t.el.style.setProperty("--slides-to-show",o+""),t.el.style.setProperty("--slide-gap",r),t.isStatic?t.el.classList.add("static"):e.draggable&&function(e){const t=e.track;t.slider=e;const n=d()?"touchstart":"pointerdown";t.addEventListener(n,u),t.addEventListener("click",(t=>{(e.isTransitioning||e.isDragging)&&t.preventDefault()})),t.addEventListener("dragstart",g)}(t),function(e){if(!e.config.enablePagination||e.isStatic)return;const t=e.el.querySelector(".blaze-pagination");if(!t)return;e.paginationButtons=[];const n=e.states.length;for(let i=0;i<n;i++){const s=document.createElement("button");e.paginationButtons.push(s),s.textContent=1+i+"",s.ariaLabel=`${i+1} of ${n}`,t.append(s),s.slider=e,s.index=i,s.onclick=b}e.paginationButtons[0].classList.add("active")}(t),function(e){const t=e.config;if(!t.enableAutoplay)return;const n="to left"===t.autoplayDirection?"next":"prev";e.autoplayTimer=setInterval((()=>{e[n]()}),t.autoplayInterval),t.stopAutoplayOnInteraction&&e.el.addEventListener(d()?"touchstart":"mousedown",(()=>{clearInterval(e.autoplayTimer)}),{once:!0})}(t),function(e){const t=e.el.querySelector(".blaze-prev"),n=e.el.querySelector(".blaze-next");t&&(t.onclick=()=>{e.prev()}),n&&(n.onclick=()=>{e.next()})}(t),a(t)}const E=window.wp.element,k="core/gallery",T="core/slider",z="gallery-slider",C={all:{slidesToShow:1,slidesToScroll:1,slideGap:"20px",draggable:!0,loop:!0,enableAutoplay:!1,stopAutoplayOnInteraction:!0,autoplayInterval:3e3,autoplayDirection:"to left",enablePagination:!0,transitionDuration:500,transitionTimingFunction:"ease"}};function I(e){const t=(0,E.useRef)(),n=(0,E.useRef)(null);return(0,E.useEffect)((()=>{t.current||(t.current=new y(n.current,e))}),[]),n}const D=e=>{let{className:t}=e;return t===z};function O(){return O=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},O.apply(this,arguments)}window.React;const L=window.wp.i18n,A=window.wp.compose,N=window.wp.blockEditor,P=window.wp.components,B=()=>(0,E.createElement)("div",{className:"controls"},(0,E.createElement)("button",{className:"blaze-prev"},"prev"),(0,E.createElement)("div",{className:"blaze-pagination"}),(0,E.createElement)("button",{className:"blaze-next"},"next")),F=(0,A.createHigherOrderComponent)((e=>t=>{var n;const{attributes:i,isSelected:s,setAttributes:o}=t;if(!D(i))return(0,E.createElement)(e,t);console.log(t);const r=null!==(n=i?.blazeconfig)&&void 0!==n?n:{},a=(e=>({all:{...e},...C}))(r);return(0,E.createElement)(E.Fragment,null,(0,E.createElement)("div",{className:"blaze-slider",ref:I(a)},(0,E.createElement)("div",{className:"blaze-container"},(0,E.createElement)("div",{className:"blaze-track-container"},(0,E.createElement)(e,O({},t,{"data-blaze":JSON.stringify(a)})))),(0,E.createElement)(B,null)),(0,E.createElement)(N.InspectorControls,null,(0,E.createElement)(P.PanelBody,{title:"Slider",initialOpen:!0},(0,E.createElement)(P.ToggleControl,{label:(0,L.__)("Loop"),checked:r.loop,onChange:e=>{o({...i,blazeconfig:{...r,loop:e}})}}),(0,E.createElement)(P.ToggleControl,{label:(0,L.__)("Autoplay"),checked:r.enableAutoplay,onChange:e=>{o({...i,blazeconfig:{...r,enableAutoplay:e}})}}),(0,E.createElement)(P.RangeControl,{label:(0,L.__)("Slides Displayed"),value:r.slidesToShow,onChange:e=>{o({...i,blazeconfig:{...r,slidesToShow:e}})},min:1,max:10}))))}),"Controls"),$=(0,A.createHigherOrderComponent)((e=>t=>{if(!D(t.attributes))return(0,E.createElement)(e,t);const{attributes:n}=t,{blazeconfig:i}=n||C.all,s={...t,wrapperProps:{...t.wrapperProps,blazeconfig:{...i}}};return(0,E.createElement)(e,O({},s,{className:"blaze-track"}))}),"withEdit");(0,e.registerBlockVariation)(k,{name:T,title:"Slider block",description:"A slider using the core gallery",isDefault:!1,icon:"universal-access-alt",keywords:["slider"],attributes:{className:z},scope:["inserter"],isActive:D}),(0,t.addFilter)("editor.BlockEdit",k,F),(0,t.addFilter)("editor.BlockListBlock",T,$),(0,t.addFilter)("blocks.getSaveElement",T,((e,t,n)=>{if(!D(n))return e;const i=JSON.stringify({...n.blazeconfig})||null;return(0,E.createElement)("div",{className:"blaze-slider","data-blaze":i},(0,E.createElement)("div",{className:"blaze-container"},(0,E.createElement)("div",{className:"blaze-track-container"},e)),(0,E.createElement)(B,null))}))}},n={};function i(e){var s=n[e];if(void 0!==s)return s.exports;var o=n[e]={exports:{}};return t[e](o,o.exports,i),o.exports}i.m=t,e=[],i.O=(t,n,s,o)=>{if(!n){var r=1/0;for(d=0;d<e.length;d++){n=e[d][0],s=e[d][1],o=e[d][2];for(var a=!0,l=0;l<n.length;l++)(!1&o||r>=o)&&Object.keys(i.O).every((e=>i.O[e](n[l])))?n.splice(l--,1):(a=!1,o<r&&(r=o));if(a){e.splice(d--,1);var c=s();void 0!==c&&(t=c)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[n,s,o]},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e={309:0,641:0};i.O.j=t=>0===e[t];var t=(t,n)=>{var s,o,r=n[0],a=n[1],l=n[2],c=0;if(r.some((t=>0!==e[t]))){for(s in a)i.o(a,s)&&(i.m[s]=a[s]);if(l)var d=l(i)}for(t&&t(n);c<r.length;c++)o=r[c],i.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return i.O(d)},n=self.webpackChunkslider_block=self.webpackChunkslider_block||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var s=i.O(void 0,[641],(()=>i(456)));s=i.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,